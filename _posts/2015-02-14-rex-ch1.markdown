---
layout: post
title:  "Ch 1: Overview of an Interpreter"
date:   2015-02-14 23:03:36
categories: rex
---

If you haven't already I encourage you to first look at the introduction to this tutorial [here][intro]. In this chapter we'll be looking at what an interpreter actually is. 

###What is an interpreter? 
From [webopedia][webopedia], it is a program which translates high-level instructions to an intermediate form which it then executes. This is in contrast to a compiler which translates high-level instructions directly into machine language. For example, when you compile a C or Java program, it translates the code that you have written into machine language. On the other hand, running Python code translates to an intermediate form (usually C or Java). So we're going to be making a language similar to Python in that our interpreter will be translating code written in our language to Java and then executing it.

The short and less complex version of the paragraph above is we're essentially going to translate Rex to Java and then execute the resulting Java code. So how do we do that?

###Parts of an interpreter
Let's say I wrote in our language, Rex, this:

```
2 + 3
```

And let's say we want that to print to stdout "5". Then here's a diagram of what the interpreter would look like:

```
"2 + 3" -> | Rex Interpreter | -> "5"
```


But what is that magical box? It's actually made up of 2 parts: The Lexer and the Parser. 

The Lexer takes in the input, just a stream of characters, and seperates them into tokens. For instance, in this example, it would split them up into 3 different tokens. Something like:

```
INT 2
```

```
OPERATOR +
```

```
INT 3
```


That's all it does, and then it passes those tokens into the Parser.

The Parser has a much harder job. It has to take those tokens generated by the Lexer and do stuff with them. In this case it performs the operator function (addition) on the two operands (ints) and then must output the result (5). So here's a more accurate diagram of an interpreter:

```
"2 + 3" -> | Lexer | -> "INT 2 ..." -> | Parser | -> "5"
```

We will obviously go into more details of how each part functions when we get down to implementing them.

###Getting Input
But before we dive in to implementing either part of the interpreter, we need some way to get our input, the code written in Rex! It doesn't have to be very complex, all it needs to do for now is take input from stdin. If you want to be fancy, you can also add the option to take input from a file. So go ahead and code that and afterwards you can compare it to mine:

<b><a> Show Code </a></b>
{: .showHide target="1"}

<div class="targetDiv" id="div1">
{% highlight java %}
import java.util.Scanner;
import java.io.File;
import java.io.FileNotFoundException;

public class Rex
{
   public static void main(String[] args)
   {
      Scanner scanner;

      if(args.length > 1)
      {
         System.out.println("Too many arguments, Exiting...");
         return;
      }
      else if (args.length == 1)
      {
         File file;

         try
         {
            file = new File(args[0]);
            scanner = new Scanner(file);
         }
         catch (FileNotFoundException e)
         {
            System.out.println("Filename not valid, Exiting...");
            return;
         }
      }
      else
      {
         scanner = new Scanner(System.in);
         System.out.println("Rex Initialized");
      }
   }
}
{% endhighlight %}
</div>

All this is doing is checking to see if a filename was passed to Rex. If it was, create a scanner to read input from that file, otherwise create scanner to read input from stdin.

And that's all we need to do for now, we'll start implementing the Lexer next chapter. As always, feel free to hit me with any questions, comments, etc. at rex@bittersyntax.com

#Next Chapter: [Creating a Basic Parser][ch2]

[intro]:       /rex/2015/02/14/rex-introduction.html
[webopedia]:   http://www.webopedia.com/TERM/I/interpreter.html
[ch2]:         /rex/2015/02/18/rex-ch2.html
